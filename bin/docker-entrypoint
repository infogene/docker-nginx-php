#!/usr/bin/env bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

usage() {
  cat << EOF # remove the space between << and EOF, this is due to web plugin issue
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [ --option1[ value] [ --option2 ...] ] arg1 [arg2...]

Script description here.

Available options:

-h, --help        Print this help and exit
-v, --verbose     Print script debug info
--mode-dev        Force Flag to run application in development mode (with xdebug enabled), default mode to env variable APP_ENV | prod
--mode-prod       Force Flag to run application in production mode (with xdebug disabled)
--start-cron      Start crontab ONLY
--start-backend   Start Backend server ONLY
--start-frontend  Start Frontend server ONLY
--start-all       Start Backend & Frontend server together
--boot-cmd        Parameter to run a command at startup --boot-cmd "php bin/console cache:clear"
--cli             Parameter to run application in cli mode (ex --cli php bin/console), IMPORTANT: if --cli option no service is started, options "--start-xxx" are ignored
args              IMPORTANT: If arguments are present, all options will be ignored, entrypoint behave as a default one
EOF
  exit
}

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

parse_params() {
  # default values of variables set from params
  PARAM_ENABLE_XDEBUG=0
  PARAM_MODE_DEV=0
  PARAM_MODE_PROD=0
  PARAM_START_CRON=0
  PARAM_START_BACKEND=0
  PARAM_START_FRONTEND=0
  PARAM_START_ALL=0
  PARAM_BOOT_CMD=${APP_BOOT_CMD-}
  PARAM_CLI_CMD=''

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -v | --verbose) set -x ;;
    --no-color) NO_COLOR=1 ;;
    --enable-xdebug) PARAM_ENABLE_XDEBUG=1 ;;
    --mode-dev) PARAM_MODE_DEV=1 ;;
    --mode-prod) PARAM_MODE_PROD=1 ;;
    --start-cron) PARAM_START_CRON=1 ;;
    --start-backend) PARAM_START_BACKEND=1 ;;
    --start-frontend) PARAM_START_FRONTEND=1 ;;
    --start-all) PARAM_START_ALL=1 ;;
    --boot-cmd)
      PARAM_BOOT_CMD="${2-}"
      shift
      ;;
    --cli)
      PARAM_CLI_CMD="${2-}"
      shift
      ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  args=("$@")

  # check required params and arguments
#  [[ -z "${param-}" ]] && die "Missing required parameter: param"
#  [[ ${#args[@]} -eq 0 ]] && die "Missing script arguments"


  [[ ${PARAM_MODE_DEV} -eq 0 && ${PARAM_MODE_PROD} -eq 0 && "${APP_ENV-}" == "" ]] && PARAM_MODE_DEV=0
  [[ ${PARAM_MODE_DEV} -eq 0 && ${PARAM_MODE_PROD} -eq 0 && "${APP_ENV-}" == "dev" ]] && PARAM_MODE_DEV=1
  [[ ${PARAM_MODE_DEV} -eq 0 ]] && PARAM_MODE_PROD=1
  [[ ${PARAM_MODE_DEV} -eq 1 ]] && PARAM_MODE_PROD=0
  [[ ${PARAM_MODE_DEV} -eq 1 ]] && PARAM_ENABLE_XDEBUG=1
  [[ ${PARAM_MODE_PROD} -eq 1 ]] && PARAM_MODE_DEV=0
  [[ ${PARAM_MODE_PROD} -eq 1 ]] && PARAM_MODE_DEV=
  [[ ${PARAM_START_CRON} -eq 1 ]] && PARAM_START_ALL=0
  [[ ${PARAM_START_BACKEND} -eq 1 ]] && PARAM_START_ALL=0
  [[ ${PARAM_START_FRONTEND} -eq 1 ]] && PARAM_START_ALL=0
  [[ ${PARAM_START_ALL} -eq 1 ]] && PARAM_START_BACKEND=1
  [[ ${PARAM_START_ALL} -eq 1 ]] && PARAM_START_FRONTEND=1

  return 0
}

parse_params "$@"
setup_colors

# Entrypoint logic

# If there is args that mean container has to exec a cmd like bash or whatever
if [[ ${#args[@]} -gt 0 ]] ; then
  exec "$@"
  exit 0
fi

# Exec entrypoint as a service
msg "Starting entrypoint ... ${NOFORMAT}"


## Enable xdebug
if [[ ${PARAM_ENABLE_XDEBUG} -eq 1 && $(id -u) -eq 0 ]]; then
  ## Enable xdebug if not already enabled
  if ! echo $(php -m) | grep -Eq "(xdebug)"; then
    echo "  - Enable xdebug ..."
    docker-php-ext-enable xdebug > /dev/null
  fi
fi

## DEVELOPMENT MODE #########################
#############################################
if [[ ${PARAM_MODE_DEV} -eq 1 ]]; then
  export APP_ENV=dev
  echo "  - Running application in DEVELOPMENT MODE"
  echo "  -   APP_ENV=${APP_ENV}"
  docker-exec-www-data git config --global --add safe.directory /application
fi

## PRODUCTION MODE #########################
#############################################
if [[ ${PARAM_MODE_PROD} -eq 1 ]]; then
  export APP_ENV=prod
  echo "  - Running application in PRODUCTION MODE"
  echo "  -   APP_ENV=${APP_ENV}"
fi

## Run bootstrap application : composer, database update ... etc
if echo "${PARAM_BOOT_CMD}" | grep -Eq ".+"; then
  echo "  - Bootstrap application ..."
  echo "  -   Startup CMD : ${PARAM_BOOT_CMD}"
#  docker-exec-www-data ${PARAM_BOOT_CMD} > /dev/null
  docker-exec-www-data ${PARAM_BOOT_CMD}
fi

## Run App in CLI mode : command "--cli"
if echo "${PARAM_CLI_CMD}" | grep -Eq ".+"; then
  echo "  - Running cli"

  docker-exec-www-data ${PARAM_CLI_CMD}
  exit 0
fi

## Start cron :
if [[ ${PARAM_START_CRON} -eq 1 ]]; then
  echo "  - Start cron ..."
  #crontab /var/spool/cron/crontabs/*
  crontab -u www-data -l && echo ""

  exec $(echo "/usr/sbin/crond -f")
  exit 0
fi

## Start nuxt server & output logs to std out
if [[ ${PARAM_START_FRONTEND} -eq 1 ]]; then
  echo "  - Start nuxt ..."

    if [[ ${PARAM_START_BACKEND} -eq 0 ]]; then
      docker-exec-www-data yarn --cwd frontend ${APP_ENV}
      exit 0
    fi
  docker-exec-www-data yarn --cwd frontend ${APP_ENV} &
fi

## Start nginx server & output logs to std out
if [[ ${PARAM_START_BACKEND} -eq 1 ]]; then
  echo "  - Start nginx + php-fpm ..."
  echo ""

  nginx -g 'daemon off;' &

  exec 'php-fpm' '-F'
  exit 0
fi